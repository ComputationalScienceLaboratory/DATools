
nvar = 40;
nvarnature = 2*nvar;

if nvarnature == nvar
    naturetotruth = speye(nvar);
else
    naturetotruth = spdiags(repmat([1/4, 1/4, 1/2, 1/4, 1/4], nvarnature, 1), [-nvarnature+1, -1, 0, 1, nvarnature-1], nvarnature, nvarnature);
    naturetotruth = naturetotruth(1:2:nvarnature, :);
end

solver      = @(f,t,y) csl.utils.rk4(f, t, y, 0.05);

nature = csl.odetestproblems.lorenz96.presets.RandomIC(nvarnature);

model = csl.odetestproblems.lorenz96.presets.RandomIC(nvar);

distfn = model.DistanceFunction;

radius = 3;
inflation = 1.05;


H = 1:nvar;

E = speye(nvar);

Qest = 0;

ensN = 10;

parallel = false;
ripits = [1 1];

R = speye(numel(H));
Rsqrt = sqrtm(R);


locfun = csl.datools.statistical.ensemble.localisation.gauss_tiny(radius, distfn);

naturefo = csl.datools.DAmethod(nature, solver);

da = csl.datools.statistical.ensemble.DEnKF(model, solver, H,ensN, E, Qest, locfun, inflation, parallel, ripits);

time = 1000;

% forecast this much
futurefore = 10;
for i = 1:futurefore
    naturefo.forecast();
    da.forecast();
end

for i = 1:time
    truth = naturetotruth*naturefo.CurrentBestGuess
    
    y = naturetotruth*;
    y = y(H) + Rsqrt*randn(numel(H), 1);
    
    da.analysis(y, R);
    
    err = 
    
end